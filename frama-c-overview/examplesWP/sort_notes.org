* Predicat sorted
  - cf binary_search
  predicate sorted{L}(int* a, integer length) =
   \forall integer i,j; 0<=i<=j<length ==> a[i]<=a[j];

* Contrat
** requires: validité, longueur
    requires \valid(a+(0..length-1));
    requires length > 0;

** assigns *(a+(0..length-1));

** 2 comportements: sorted et same_elements

- comportements pour structurer la spec (et pas définir des cas d'utilisation
  distincts)

*** sorted: le tableau est trié
    behavior sorted:
    ensures sorted(a,length);

*** same_elements: on a les mêmes éléments qu'au début
    behavior same_elements:
    ensures same_elements{Pre,Here}(a,length)

    - notion de prédicat portant sur deux états distincts

* predicat same_elements
  - prédicat auxiliaire swap (échange de deux cellules):

  predicate swap{L1,L2} (int*a, integer i, integer j, integer length) =
       0<=i<j<length 
    && \at(a[i],L1) == \at(a[j],L2)
    && \at(a[i],L2) == \at(a[j],L1)
    && \forall integer k; 0<=k<length && k!=i && k!=j ==>
           \at(a[k],L1) == \at(a[k],L2);

  - predicat inductif
  - 3 cas:
    - réflexion (si on ne change pas d'état, le prédicat est vrai)
    - swap (si on fait un échange, same_elements est vrai)
    - transitivité (si on a les mêmes éléments entre L1 et L2 et L2 et L3,
      c'est aussi vrai entre L1 et L3).

inductive same_elements{L1,L2}(int*a , integer length) {
case refl{L}: \forall int*a, integer length; same_elements{L,L}(a,length);
case swap{L1,L2}: \forall int*a, integer i,j,length;
   swap{L1,L2}(a,i,j,length) ==> same_elements{L1,L2}(a,length);
case trans{L1,L2,L3}: \forall int*a, integer length;
 same_elements{L1,L2}(a,length)
 ==> same_elements{L2,L3}(a,length)
 ==> same_elements{L1,L3}(a,length);
}
* Preuve
** invariants externes
*** structurels
  loop invariant 0<=current<length;
  loop assigns a[0..length-1],current;

*** pour sorted
    - on a trié les premiers éléments
    - tous les éléments de gauche sont plus petits que ceux de droite

    for sorted: loop invariant sorted(a,current);
    for sorted: loop invariant
    \forall integer i,j; 0<=i<current<=j<length ==> a[i] <= a[j];

*** pour same_elements
    - on a une permutation
     for same_elements: loop invariant
     same_elements{Pre,Here}(a,length);
*** variant
          loop variant length-current;

** invariants internes
*** structurels
    loop invariant current+1<=i<=length;
    loop assigns i,min,min_idx;
    loop invariant current<=min_idx<i;
    loop invariant a[min_idx] == min;
*** pour sorted
    - on garde l'index du plus petit élément de la partie droite du tableau
    for sorted: loop invariant
    \forall integer j; current<=j<i ==> min <= a[j];
*** pour same_elements
    - rien à faire (le tableau n'est pas bougé dans la boucle interne)
*** variant
              loop variant length -i;

** assertions
Il y a besoin d'une assertion:
- à la fin du if, indiquer à l'outil qu'on vient de faire un swap avec les
  bons arguments (donc qu'on a bien une permutation)

  for same_elements: assert swap{L,Here}(a,current,min_idx,length);
